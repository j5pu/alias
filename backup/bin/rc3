#!/bin/sh

#
# Generates system-wide .env.sh profile

set -eu

_generated__rc_find() {
  # Any file under  "*/${supported}/*" and any file "*/${supported}.*" inside "${type}"
  # Darwin/Linux.sh pasaría, o sea, absurdo si pongo un Linux.sh debajo de un Darwin...
  #
  for sh in bash bash-4 zsh ""; do
    set -- find "${RC_GENERATED}" "${RC_ETC}" "${RC_CUSTOM}"  \( -type f -or -type l \) -path "*/\${1}/*" \(

    or=""
    for supported in 00-common "${HOST}" "${DIST_ID}" "${DIST_ID_LIKE}" "${UNAME}" "${SUDO##*/}"; do
      [ "${supported-}" ] || continue
      # shellcheck disable=SC2086
      set -- "$@" ${or} -path "*/${supported}/*" -or -path "*/${supported}.*"
      or="-or"
    done

    set -- "$@" \) -not \( -name ".*"

    case "${sh-}" in
      bash) set -- "$@" -or -path "*/zsh/*" -or -path "*/bash-4/*" ;;
      bash-4) set -- "$@" -or -path "*/zsh/*" ;;
      zsh) set -- "$@" -or -path "*/bash*/*" ;;
      *) set -- "$@" -or -path "*/zsh/*" -or -path "*/bash*/*" ;;
    esac

    set -- "$@" \)

    cat "${TMP}" <<EOF
#!/bin/sh

#
# find "${sh:-posix}" files to be sourced by "${RC_FILE}"
#
# Search is done for: 00-common, \$DIST_ID, \$DIST_ID_LIKE, \$HOST, \$SH and \$UNAME
# File stem with the supported value takes preference over directory which is not in the variable
# i.e: Darwin/Linux.sh will be sourced.
#
# Arguments:
#   compat    functions.d, profile.d or rc.d
#   exclude   exclude name: i.e: sudo.sh
#
${GENERATED_BY}

set -eu

$@
EOF
    _cmp "${RC_GENERATED_BIN}/_rc_find${sh:+_${sh}}" executable
  done
}

_rc_file_functions_d() {
  cat >> "${TMP}" <<EOF
# shellcheck shell=sh

#
# RC system-wide posix profile
#
${GENERATED_BY}

unset ENV

# RC trace
#
: "\${RC_TRACE=0}"; [ "\${RC_TRACE}" -eq 0 ] || set -x

# shell.sh
#

. "${RC_BIN}/shell.sh"


# functions.d
#

if ! command -v resh >/dev/null; then
  . "${RC_BIN}/${0##*/}.sh"

  rc_source_dir "${RC_GENERATED_BIN}/${_RC_FIND}" functions.d
fi
EOF
  . "${TMP}"
}

_rc_file_profile_d() {
  cat >>"${TMP}" <<EOF


# profile.d
#

#
# RC: profile.d for interactive shells has been sourced already
: "\${_RC_PROFILE_D_SOURCED=0}"; export _RC_PROFILE_D_SOURCED

if [ "\${_RC_PROFILE_D_SOURCED}" -eq 0 ]; then
  _RC_PROFILE_D_SOURCED=1

  # If /etc/zsh/profile does not source /etc/profile, sources /etc/profile
  # Kali: /etc/zsh/z{profile,shenv,shrc,login} and ~/.zshrc, Darwin: /etc/z{profile,shenv,shrc}
  # zsh -l: /etc/zsh/zshenv -> /home/j5pu/.zshenv -> /etc/zsh/zprofile -> /etc/profile -> /home/j5pu/.zprofile ->
  #         /etc/zsh/zshrc -> /home/j5pu/.zshrc -> /etc/zsh/zlogin -> /home/j5pu/.zlogin
  #         /home/j5pu/.zlogout -> /etc/zsh/zlogout

  # MANPATH, 1st source generated/profile.d/brew.sh, otherwise it will repeat it, second path_helper (cleans duplicates)
  unset INFOPATH MANPATH
  rc_source_dir "${RC_GENERATED_BIN}/${_RC_FIND}" profile.d
fi
EOF
  . "${TMP}"
}

_rc_file_rc_d() {
  cat >> "${TMP}" <<EOF


# rc.d
#

#
# RC: rc.d for interactive shells has been sourced already
: "\${_RC_RC_D_SOURCED=0}"

if { [ "\${PS1-}" ] || echo "\$-" | grep -q i; } && [ "\${_RC_RC_D_SOURCED}" -eq 0 ]; then
  _RC_RC_D_SOURCED=1

  unalias cp egrep fgrep grep l l. la ll lld ls mv rm xzegrep xzfgrep xzgrep zegrep zfgrep zgrep 2>/dev/null

  rc_source_dir "${RC_GENERATED_BIN}/${_RC_FIND}" rc.d
fi
EOF
 _cmp "${RC_FILE}"
}

# TODO: añadir que filtre por el sudo para rc.d también o poner un grep -v
  # TODO:
  #  Deberia mirar si el find da primero los de generated, luego etc y luego custom o
  #  o hacer 3 find porque asi se puede sobreescribir en custom y con 00- y me falta un sort numeric en find
  #  GITHUB_ACTION en generated y cambiar a que las variables sean un puto fichero solo las que son de uno solo,
  #  00-common.sh y meter el USER
  #  mirar como se hacia el PATH de RUBY.
# TODO: el /etc/profile.d pero solo sh cuando es bash o shell
#######################################
# show usage
# Arguments:
#   1
#######################################
help() {
  [ ! "${1-}" ] || >&2 echo "${0##*/}: Invalid option: ${arg}" && echo

  >&2 cat <<EOF
usage: ${0##*/}
   or: ${0##*/} [--force] [add|clean|del|hook|install|supported|sync] [option]
   or: ${0##*/} [-h|--help|help]
   or: ${0##*/} --force
   or: ${0##*/} add [directory|command] [<supported directories/OS/host]
   or: ${0##*/} add
   or: ${0##*/} add .
   or: ${0##*/} add . 00-common
   or: ${0##*/} clean
   or: ${0##*/} del <alias_name>
   or: ${0##*/} hook
   or: ${0##*/} hook --force
   or: ${0##*/} --force hook
   or: ${0##*/} install
   or: ${0##*/} install --force
   or: ${0##*/} --force install
   or: ${0##*/} sync
   or: ${0##*/} sync <message>

generates \$ENV file and manages rc repository, with no options creates the static \$ENV file "${RC_FILE}"

Commands:
   -h, --help, help   display this help and exit.
   --force            force updating static \$ENV file ".${0}.sh" (valid with not commands, hook, install or supported)
   add                to add a new alias to rc generated directory "${RC_GENERATED_RC_D}":
                      - if argument is a directory ".basename" (default: cwd) will be
                        added to dirs.sh (default: "${HOST}" directory)
                      - it is added to sudo.sh if it is not a directory (default: "${UNAME}" directory).
   clean              to clean directory aliases which directory does not exist
   del                deletes an alias from rc generated directory "${RC_GENERATED_RC_D}"
   hook               shows the path to \$ENV file "${RC_FILE}"
   list               show list of commands available and exit
   install            to install hooks into /etc/profile, ~/.profile, ~/.bashrc, ~/.bash_profile for user and root
   supported          show list of supported directories to add aliases "${RC_SUPPORTED}"
   sync               will push or pull repository based on status

Globals:
   RC_FORCE           to force updating static \$ENV file ".${0}.sh", similar to --force

EOF
  exit "${1:-0}"
}

main() {

  action=false; supported=false
  for arg; do
    case "${arg}" in
      -h|--help|help) help 0;;
      --force) RC_FORCE=1; shift  ;;
      f|add|aliases|clean|del|install|sync)
        if ! $action; then
          function="${arg}"; action=true; shift
        fi
        ;;
      list) printf "%s\n" add clean del hook install "${arg}" supported sync; exit ;;
      supported) supported=true; shift ;;
      hook) echo "${_rc_file}"; exit ;;
      -*) help 1 ;;
    esac
  done

  _generated_vars

  if ! test -f "${RC_FILE}" || [ "${RC_FORCE}" -eq 1 ]; then
    ! test -f  "${RC_FILE}" || [ "$(fstat "${RC_FILE}")" = "${USER}" ] || die "${RC_FILE}: is not owned by: ${USER}"
    _generated__rc_find
    _generated_00_common_sh
    _generated_brew_sh
    _generated_dist_sh
    _generated_hosts_d
    _generated_rc_sh

    _rc_file_functions_d
    _rc_file_profile_d
    _rc_file_rc_d
  fi
}

main "$@"
