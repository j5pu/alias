#!//usr/bin/env bash

#
# To vars if starts with '{' or to json
# Usage:
#   echo "\"{\"foo\":\"1\",\"bar\":\"2\"}\"" | json
#   json "\"{\"foo\":\"1\",\"bar\":\"2\"}\""
#   echo "{\"foo\":\"1\",\"bar\":\"2\"}" | json
#   json "{\"foo\":\"1\",\"bar\":\"2\"}"
#   printf "%s\n" foo 1 bar 2 | json
#   json foo 1 bar 2

#exec 19>/Users/j5pu/rc/.log
#export BASH_XTRACEFD=19
#set -x
help() {
  rc=$?

  >&2 cat <<EOF
usage: ${0##*/} <json|var value|file>
   or: <json|var value> | ${0##*/}

to json or from json to variables, accepts one line json or multiline formatted json

nested keys are shown as "key___key2"
list lines are plain multiline echoed as values of the dict key
long line dicts are considered a value
dicts and lists must have the values in a new line: "key": {\n


Commands:
   -h, --help   display this help and exit.

Examples:
  echo "\"{\"foo\":\"1\",\"bar\":\"2\"}\"" | ${0##*/}
  ${0##*/} "\"{\"foo\":\"1\",\"bar\":\"2\"}\""
  echo "{\"foo\":\"1\",\"bar\":\"2\"}" | ${0##*/}
  ${0##*/} "{\"foo\":\"1\",\"bar\":\"2\"}"
  printf "%s\n" foo 1 bar 2 | ${0##*/}
  ${0##*/} foo 1 bar 2
EOF
  exit $rc
}

line_DICT() {
  rv="$(echo "${ARG}" | sed -E 's/(^"|",$|,$)//g; s/(": "|":"|": |":)/="/g; s/$/"/g; s/""$/"/g; s/="$/=""/g')"
  key="${rv%%=*}"
  value="${rv#*=}"

  KEY="${PREVIOUS_KEY:+${PREVIOUS_KEY}___}${key}"
  if $FIRST_KEY; then
    PREVIOUS_KEY="${KEY-}"
  fi
  $FIRST_KEY || echo "${KEY}=${value}"
  FIRST_KEY=false
}

line_LIST() {
  if $FIRST_KEY; then
    key="$(echo "${ARG%%:*}" | tr -d \" )"

    KEY="${PREVIOUS_KEY:+${PREVIOUS_KEY}___}${key}"
    PREVIOUS_KEY="${KEY-}"
    ARG="${KEY}=\""
  fi
  echo "${ARG}"
  FIRST_KEY=false

}

reset_PREVIOUS_KEY() {
  case "${PREVIOUS_KEY}" in
    *___*) PREVIOUS_KEY="${PREVIOUS_KEY%___*}" ;;
    *) PREVIOUS_KEY="" ;;
  esac
}

main() {
  [ $# -ne 0 ] || help

  line=0
  LEVEL=0
  if [ "${1-}" = "{" ] && [ $# -gt 1 ]; then
    # Multiline json
    for ARG; do
      FIRST_KEY=false
      line="$((line + 1))"
      case "${ARG}" in
        "{") PREVIOUS_LEVEL=$LEVEL; LEVEL="$((LEVEL + 1))" ;;
        "}") PREVIOUS_LEVEL=$LEVEL; LEVEL="$((LEVEL - 1))"; reset_PREVIOUS_KEY ;;
        *\"*\"": {") PREVIOUS_LEVEL=$LEVEL; LEVEL="$((LEVEL + 1))"; FIRST_KEY=true; line_DICT ;;
        *\"*\"": [") PREVIOUS_LEVEL=$LEVEL; LEVEL="$((LEVEL + 1))"; FIRST_KEY=true; line_LIST ;;
        *"}"|*"},") PREVIOUS_LEVEL=$LEVEL; LEVEL="$((LEVEL - 1))"; reset_PREVIOUS_KEY ;;
        *"]"|*"],") PREVIOUS_LEVEL=$LEVEL; LEVEL="$((LEVEL - 1))"; echo "\""; reset_PREVIOUS_KEY ;;
        *\"*\"": "*) line_DICT ;;
        *) line_LIST ;;
      esac
    done
    exit
  fi

  echo=false; json="{"; odd=true

  for arg; do
    case "$arg" in
      '^{'*|'"{'*|"{\""*)
        # One line json
        echo "${arg}" | sed -E 's/(","|,")/"\x7"/g; s/[{}"]//g' | tr "\7" "\n" |while IFS=: read -r var value; do
          echo "$var"="\"$value\""
        done
        ;;
      --help|-h) help ;;
      *)
        [ $(($#%2)) -eq 0 ] || { >&2 echo "${0##*/}: odd ($#) number of argument(s) given, but even number of\
 arguments is needed to convert to json: ${arg}"; exit 1; }
        echo=true
        json="${json}\"${arg}\""
        if $odd; then
          json="${json}:"; odd=false
        else
          json="${json},"; odd=true
        fi
        ;;
    esac
  done
  ! $echo || echo "${json}" | sed 's/,$/}/'
}

if test -f "${1:-}"; then
  file="$1"
  set --
  while read -r word; do
    set -- "$@" "${word}"
  done < "${file}"
elif test -f "${1:-}" || test -p /dev/stdin || { [ ! -t 0 ] && [ ! -p /dev/stdin ]; }; then
  while read -r word; do
    set -- "$@" "${word}"
  done
fi

main "$@"
