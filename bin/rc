#!/bin/bash

#
# Generates system-wide .rc.sh profile

set -eu

# Force creation of .env.sh (can be set with --force) [Variable Not added to file]
# Use when:
#   hostname changes,
#   brew is installed,
: "${RC_FORCE=0}"
# RC trace [Value not added to file]
#
: "${RC_TRACE=0}"; [ "${RC_TRACE}" -eq 0 ] || set -x

cd "$(dirname "$0")/.." && pwd -P
####################################### Constants - Start
# Command Line Tools HOME
#
####################################### Constants - End


####################################### Vars - generated/profile.d/00-common.sh - Start
# $HOMEBREW_PREFIX is where directory subdirectories (etc, Caskroom, Cellar, ...) are created.
# $HOMEBREW_REPOSITORY (https://github.com/Homebrew/brew) is usually clone as"
#   Homebrew under $HOMEBREW_PREFIX (except macOS arm) if brew install.sh script is used."
# if $HOMEBREW_PREFIX != $HOMEBREW_REPOSITORY (https://github.com/Homebrew/brew):"
#   - Subdirectories are created under $HOMEBREW_PREFIX."
#   - Contents below subdirectories are symlinked to Cellar, etc"
#   - brew executable is symlinked from $HOMEBREW_REPOSITORY to $HOMEBREW_PREFIX."

####################################### Vars - generated/profile.d/00-common.sh - End


####################################### Vars - generated/profile.d/rc.sh - Start
# RC Top Repository Path
#
####################################### Vars - generated/profile.d/rc.sh - End

####################################### Vars - generated/profile.d/git.sh - End

####################################### Vars - generated/profile.d/git.sh - End


####################################### Vars - generated/profile.d/paths.sh - Start

####################################### Vars - generated/profile.d/paths.sh - End


####################################### Vars - Start
# Date variable exported to be used by rc.awk
#
DATE="$(date "+%F %T %z")"; export DATE
# Used in header files
#
GENERATED_BY="$("# Generated by: $0, on: ${DATE}")"
# Temp file
#
TMP="$(mktemp)"
# USER isn't always set so provide a fallback for brew and subprocesses.
#
: "${USER=$(chomp "$(id -un)")}"
####################################### Vars - End


#######################################
# temp die
# Arguments:
#  None
#######################################
_die() { >&2 echo "$*"; exit 1; }

#######################################
# compares and sources if library or change execution permission if executable
#######################################
_cp() {
  if [ "$(grep -v "Generated by:" "${TMP}" 2>/dev/null)" != "$(grep -v "Generated by:" "$1" 2>/dev/null)" ]; then
    cp -v "${TMP}" "$1"
    case "${2-}" in
      executable) chmod +x "$1" ;;
      pass) : ;;
      *) . "$1" ;;
    esac
  fi
}

#######################################
# generates generated/profile.d/00-common.sh
#######################################
_generated_00_common_sh() {
  _cp "${RC_GENERATED_PROFILE_D}/${RC_COMMON}.sh"
}

#######################################
# generates generated/profile.d/brew.sh
#######################################
_generated_brew_sh() {
  cmd brew || return 0

  rv="$(rc.awk "${HOMEBREW_BREW_SH}" "${TMP}" 2>&1 | \
    grep -v 'HOMEBREW_NO_ENV_FILTERING was deprecated for over')"
  [ ! "${rv}" ] || die "${rv}"
  _cmp "${RC_GENERATED_PROFILE_D}/brew.sh"
}

#######################################
# generates generated/profile.d/Darwin.sh
#######################################
_generated_Darwin_sh() {
  _cp "${RC_GENERATED_PROFILE_D}/${UNAME}.sh"
}

#######################################
# generates generated/profile.d/git.sh
#######################################
_generated_git_sh() {
  cat > "${TMP}" <<EOF
# shellcheck shell=sh

#
# Generated variables common to any platform, OS or host.
#
${GENERATED_BY}

# Git config system-level configuration /etc/gitconfig or /usr/local/etc/gitconfig
# https://git-scm.com/docs/git-config
export GIT_CONFIG_SYSTEM="${GIT_CONFIG_SYSTEM}"

# Git default branch from git config to generate template, etc.
#
export GIT_DEFAULT_BRANCH="${GIT_DEFAULT_BRANCH}"

# Files and directories in the template directory whose name do not start with a dot will be copied
# to the \$GIT_DIR after it is created.
# https://git-scm.com/docs/git-init
export GIT_TEMPLATE_DIR="${GIT_TEMPLATE_DIR}"
EOF
  _cp "${RC_GENERATED_PROFILE_D}/git.sh"
}

#######################################
# generates generated/git/template dir
#######################################
_generated_git_template() {
  cmd git || return 0

  config="${GIT_TEMPLATE_DIR}/config"
  info="${GIT_TEMPLATE_DIR}/info"; mkdir -p "${info}"
  exclude="${info}/exclude"
  refs="$(git config --system branch."${RC_GIT_DEFAULT_BRANCH}".merge)"
  if ! test -f "${exclude}" || [ "$(fstat --real "${exclude}")" != "${RC_GIT_CONFIG_EXCLUDES}" ]; then
    rm -f "${exclude}"
    ln -s  "${RC_GIT_CONFIG_EXCLUDES}" "${exclude}"
  fi

  git config --file "${TMP}" branch."${RC_GIT_DEFAULT_BRANCH}".remote origin

  for key in $(git config --system --name-only --get-regexp "^core.*") \
    branch."${RC_GIT_DEFAULT_BRANCH}".merge checkout.defaultRemote diff.submodule push.recurseSubmodules \
    remote.pushDefault status.submoduleSummary submodule.recurse; do
    git config --file "${TMP}" "${key}" "$(git config --system "${key}")"
  done

  git config --file "${TMP}" submodule.active .

  _cp "${config}" pass

  echo "ref: ${refs}" > "${TMP}"
  _cp "${GIT_TEMPLATE_DIR}/HEAD" pass
}

#######################################
# generates generated/profile.d/hosts.d
#######################################
_generated_hosts_d() {
  mkdir -p "${RC_GENERATED_PROFILE_D_HOSTS_D}"
  cat > "${TMP}" <<EOF
# shellcheck shell=sh

#
# ${HOSTNAME_UPPER} variables
#
${GENERATED_BY}

$(iplocal | while IFS=" " read -r iname ip; do
printf "%s\n" "# ${HOST_UPPER} IP ${iname}" "#" "export IP_${HOST}_${iname}=\"${ip}\""
done
)
EOF
  _cp "${RC_GENERATED_PROFILE_D_HOSTS_D}/${HOST}.sh"
}

#######################################
# generates generated/profile.d/Linux.sh
#######################################
_generated_Linux_sh() {
  _cp "${RC_GENERATED_PROFILE_D}/${UNAME}.sh"
}

#######################################
# generates generated/profile.d/paths.sh
#######################################
_generated_paths_sh() {
  _cp "${RC_GENERATED_PROFILE_D}/paths.sh"
}

#######################################
# generates generated/profile.d/rc.sh
#######################################
_generated_rc_sh() {
EOF
  _cp "${RC_GENERATED_PROFILE_D}/rc.sh"
}

#######################################
# show help and exit
#######################################
help() {
  [ ! "${1-}" ] || >&2 echo "${0##*/}: Invalid option: ${arg}" && echo

  >&2 cat <<EOF
usage: ${0##*/}
   or: ${0##*/} [--force] [add|clean|del|hook|install|supported|sync] [option]
   or: ${0##*/} [-h|--help|help]
   or: ${0##*/} --force
   or: ${0##*/} add [directory|command] [<supported directories/OS/host]
   or: ${0##*/} add
   or: ${0##*/} add .
   or: ${0##*/} add . 00-common
   or: ${0##*/} clean
   or: ${0##*/} del <alias_name>
   or: ${0##*/} hook
   or: ${0##*/} hook --force
   or: ${0##*/} --force hook
   or: ${0##*/} install
   or: ${0##*/} install --force
   or: ${0##*/} --force install
   or: ${0##*/} sync
   or: ${0##*/} sync <message>

generates \$ENV file and manages rc repository, with no options creates the static \$ENV file "${_RC_FILE}"

Commands:
   -h, --help, help   display this help and exit.
   --force            force updating static \$ENV file ".${0}.sh" (valid with not commands, hook, install or supported)
   add                to add a new alias to rc generated directory "${RC_GENERATED_RC_D}":
                      - if argument is a directory ".basename" (default: cwd) will be
                        added to dirs.sh (default: "${HOST}" directory)
                      - it is added to sudo.sh if it is not a directory (default: "${UNAME}" directory).
   clean              to clean directory aliases which directory does not exist
   del                deletes an alias from rc generated directory "${RC_GENERATED_RC_D}"
   hook               shows the path to \$ENV file "${_RC_FILE}"
   list               show list of commands available and exit
   install            to install hooks into /etc/profile, ~/.profile, ~/.bashrc, ~/.bash_profile for user and root
   supported          show list of supported directories to add aliases "${RC_SUPPORTED}"
   sync               will push or pull repository based on status

Globals:
   RC_FORCE           to force updating static \$ENV file ".${0##*/}.sh", similar to --force

EOF
  exit "${1:-0}"
}

#######################################
# install hooks into /etc/profile, ~/.profile, ~/.bashrc, ~/.bash_profile for user and root
# Arguments:
#  None
#######################################
install() {
  :
}

#######################################
# Generates system-wide .rc.sh profile
#######################################
main() {
  action=false; supported=false
  for arg; do
    case "${arg}" in
      -h|--help|help) help 0;;
      --force) RC_FORCE=1; shift  ;;
      add|aliases|clean|del|install|sync)
        if ! $action; then
          function="${arg}"; action=true; shift
        fi
        ;;
      list) printf "%s\n" add clean del hook install "${arg}" supported sync; exit ;;
      supported) supported=true; shift ;;
      hook) echo "${_RC_FILE}"; exit ;;
      -*) help 1 ;;
    esac
  done

  { [ "${RC-}" = "${_RC}" ] && [ "${RC_FILE-}" = "${_RC_FILE}" ]; } || RC_FORCE=1

  if ! test -f "${_RC_FILE}" || [ "${RC_FORCE}" -eq 1 ]; then
    ! test -f  "${_RC_FILE}" || [ "$(fstat "${_RC_FILE}")" = "${USER}" ] || die "${_RC_FILE}: is not owned by: ${USER}"
    :
  fi
}

main "$@"
