#!/usr/bin/env bash
# bashsupport disable=BP2001,BP2001
# shellcheck disable=SC2016,SC2028,SC2034

#
# show colors and helper functions output, or generate color lib

. "$(dirname "$0")/utils.bash"

e="\033["  # dash needs \033[
_SCRIPT="${0##*/}"

# Suffix for BackGround Colors
#
BACKGROUND="Bg"

# Suffix for Escaped Colors
#
ESCAPED="Esc"

# $FORMAT_COLOR_DEFAULT value will not be a suffix in Variables and Scripts (does not apply for Normal Format)
#
FORMAT_COLOR_DEFAULT="Bold"

# White Formats
#
WHITE=""

# Suffix for Zsh Colors
#
ENCLOSING="Zsh"

# Actions Script Names and Second Argument Value
#
declare -Ag ACTIONS=(["Installing"]="Start" ["Installed"]="Finish")

# Color Names and Values
#
declare -Ag COLORS=()

# Destination Directories and Files
#
declare -Ag DST=(["bin"]="${RC_GENERATED}/bin/${_SCRIPT}" ["lib"]="${RC_GENERATED}/lib/${_SCRIPT}.sh")

# First Argument with Different Format: Bin Name and Format
#
declare -Ag FIRST=(["bin"]="firstother" ["first"]="Bold" ["other"]="Italic")

# Color Formats
#
declare -Ag FORMATS=(["Normal"]=0 ["Bold"]=1 ["BoldItalic"]="3m${e}1" ["Dim"]=2 ["Italic"]=3 ["Under"]=4
  ["Invert"]=7 ["Strike"]=9)

# Color Names
#
declare -ag NAMES=("Black" "Red" "Green" "Yellow" "Blue" "Magenta" "Cyan" "Grey")

# Sorted Keys of Associated Arrays
#
declare -Ag SORTED=(["actions"]="$(printf -- "%s\n" "${!ACTIONS[@]}" | sort)" ["colors"]="" ["symbols"]="")

# Symbol Names and Colors
#
declare -Ag SYMBOLS_COLORS=(
  ["Cube"]="Cyan" ["Critical"]="RedInvert" ["Debug"]="Magenta" ["Division"]="Yellow"
  ["Ellipsis"]="Cyan" ["Error"]="Red" ["Finish"]="Green" ["Harpoon"]="Cyan"
  ["Left"]="Green" ["Minus"]="Red" ["More"]="Magenta" ["Multiply"]="Blue"
  ["Notice"]="Yellow" ["Ok"]="Green" ["Plus"]="Green"
  ["Right"]="Green" ["Start"]="Blue" ["Success"]="Blue"
  ["Tilde"]="Blue" ["Verbose"]="Cyan" ["Warning"]="Yellow"
)

# Symbol Names and Symbol
#
declare -Ag SYMBOLS_ICON=(
  ["Cube"]="❒" ["Critical"]="✘" ["Debug"]="＋" ["Division"]="∕"
  ["Ellipsis"]="…" ["Error"]="✘" ["Finish"]="＞" ["Harpoon"]="⇌"
  ["Left"]="〈" ["Minus"]="-" ["More"]="＞" ["Multiply"]="×"
  ["Notice"]="！""‼" ["Ok"]="✔" ["Plus"]="+"
  ["Right"]="〉" ["Start"]="＞" ["Success"]="◉"
  ["Tilde"]="～" ["Verbose"]="＞" ["Warning"]="‼"
)

# Symbol Names and Prefix Symbol in Normal
#
declare -Ag SYMBOLS_PREFIX=(["Finish"]="=" ["Start"]="=")

# Symbol Names and Text Color
#
declare -Ag SYMBOLS_TEXT=(
  ["Cube"]="${FIRST["bin"]}" ["Critical"]="Red" ["Debug"]="${FIRST["bin"]}" ["Division"]="${FIRST["bin"]}"
  ["Ellipsis"]="CyanDim" ["Error"]="${FIRST["bin"]}" ["Finish"]="${FIRST["bin"]}" ["Harpoon"]="${FIRST["bin"]}"
  ["Left"]="${FIRST["bin"]}" ["Minus"]="${FIRST["bin"]}" ["More"]="${FIRST["bin"]}" ["Multiply"]="${FIRST["bin"]}"
  ["Notice"]="YellowDim" ["Ok"]="${FIRST["bin"]}" ["Plus"]="${FIRST["bin"]}"
  ["Right"]="${FIRST["bin"]}" ["Start"]="${FIRST["bin"]}" ["Success"]="${FIRST["bin"]}"
  ["Tilde"]="${SYMBOLS_COLORS["Tilde"]}" ["Verbose"]="CyanDim" ["Warning"]="${FIRST["bin"]}"
)

# Colorized Symbols Names and Values
#
declare -Ag SYMBOLS=()

# Tmp Directories and Files
#
declare -Ag TMP=(["bin"]="$(mktemp -d)" ["lib"]="$(mktemp)")

#######################################
# generate colors array global with escaped for PS1 and normal
# Globals:
#   ACTIONS
#   COLORS
#   ESCAPE
# Arguments:
#   None
# Escaped:
#   https://github.com/koalaman/shellcheck/wiki/SC2025
#   https://mywiki.wooledge.org/BashFAQ/053
#   Using \[ and \] around colors is necessary to prevent issues with command line editing/browsing/completion!
#   Escaped should not be formatted with "printf '%b'" or "echo -e" and leave it as it is in PS1, so
#   'printf "%s" "\[\e[31m\]"'
#     - Red: '\[\e[31m\]' vs. '\033[31m' or '\e[31m'
#     - Normal: '\[\e[0m\]' or '\[\e(B\e[m\]' vs. '\033[0m' or \e[0m
#   The \[ \] are only special when you assign PS1, if you print them inside a function that runs when the prompt
#   is displayed it doesn't work. In this case you need to use the bytes \001 and \002.
#   prompt() { printf '\001%s\002%s\001%s\002' '\e[33m' message '\e[0m'; }
#   PS1="\$(prompt)\$ "
# Printf:
#   printf '\e[33m%s\e(B\e[m' message
#   printf '\e[33m%s\e[0m' message
#   printf '\033[33m%s\033[0m' message
#   printf '%b' '\e[33m'; printf '%b' message; printf '%b' '\e(B\e[m'
#   printf '%b' '\e[33m'; printf '%b' message; printf '%b' '\e[0m'
#   printf '%b' '\033[33m'; printf '%b' message; printf '%b' '\033[0m'
#######################################
arrays() {
  local color format i=0 key prefix suffix="" symbol value

  for format in "${!FORMATS[@]}"; do
    # \e[0m
    value="${e}${FORMATS["${format}"]}m"
    COLORS["${format}"]="${value}"
  done

  for color in "${NAMES[@]}"; do
    for format in "${!FORMATS[@]}"; do
      suffix=""
      [ "${format}" = "${FORMAT_COLOR_DEFAULT}" ] || suffix="${format}"
      key="${color}${suffix}"
      value="${e}${FORMATS["${format}"]};3${i}m"
      COLORS["${key}"]="${value}"
      COLORS["${key}${BACKGROUND}"]="${e}${FORMATS["${format}"]};4${i}m"
    done
    ((i += 1))
  done

  WHITE="$(sorted white)"
  SORTED["colors"]="$(sorted)"

  for symbol in "${!SYMBOLS_ICON[@]}"; do
    prefix="$(default "${symbol}" SYMBOLS_PREFIX)"
    value="${prefix}${COLORS["${SYMBOLS_COLORS["${symbol}"]}"]}${SYMBOLS_ICON["${symbol}"]}${COLORS["Normal"]}"
    SYMBOLS["${symbol}"]="${value}"
    SYMBOLS["${symbol}${ESCAPED}"]="\[${value}\]"
    SYMBOLS["${symbol}${ENCLOSING}"]="%{${value}%}"
  done

  SORTED["symbols"]="$(printf -- "%s\n" "${!SYMBOLS[@]}" | sort)"
}

#######################################
# sort colors array
# Globals:
#   COLORS
#   NAMES
# Arguments:
#   1
#######################################
sorted() {
  local regex
  regex="$(newline-to "$(printf -- "%s\n" "${NAMES[@]}")" '|')"
  printf -- "%s\n" "${!COLORS[@]}" | grep -vE "${regex}" | sort
  [ "${1-}" = 'white' ] || printf -- "%s\n" "${!COLORS[@]}" | grep -E "${regex}" | sort
}

#######################################
# show colors and helper functions output, or generate color lib
# Globals:
#   BIN_DIR
#   BUILD
#   FIRST
#   LIB_PATH
#   RC
#   RC_PROFILE_D
#   SCRIPT
#   SYM_PATH
# Arguments:
#  None
#######################################
main() {
  local arg func=demo i

  for arg; do
    case "${arg}" in
      build) func="${arg}" ;;
      --*) echo fromman "$0" "$@" || exit 0 ;;
    esac
  done

  arrays

  for i in "${DST[@]}"; do
    [ -e "${i}" ] || {
      build
      break
    }
  done

  unset Bold

  for i in "${DST[@]}"; do
    [ -d "${i}" ] || [ ! -f "${i}" ] || . "${i}"
  done

  ${func}
}

main "$@"
