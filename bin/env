#!/bin/sh

#
# Generates .env.sh

set -eu

cd "$(dirname "$0")/.."

#
# Force creation of .env.sh
: "${ENV_FORCE=0}"

env_dirs() {
  $_ENV_CHANGED || return 0

  for _gen_env_dir in ${ENV_SUPPORTED}; do
    find "${ENV_GENERATED}" -mindepth 1 -maxdepth 1 -type d | while read -r _gen_env_dir_generated; do
        _gen_env_dir_generated_absolute="${_gen_env_dir_generated}/${_gen_env_dir}"
        case "${_gen_env_dir}" in
          rhel|rhel_fedora)
            cd "${_gen_env_dir_generated}"
            if [ "${_gen_env_dir_generated##*/}" = rc.d ]; then
             ! test -e "${_gen_env_dir}" || rm -r "${_gen_env_dir}"
             ln -s fedora "${_gen_env_dir}"
            else
             ! test -e "${_gen_env_dir}.sh" || rm -r "${_gen_env_dir}.sh"
             ln -s fedora.sh "${_gen_env_dir}.sh"
            fi
            ;;
          *)
            if [ "${_gen_env_dir_generated##*/}" = rc.d ]; then
              mkdir -p "${_gen_env_dir_generated_absolute}"
              touch "${_gen_env_dir_generated_absolute}/dirs.sh"
              touch "${_gen_env_dir_generated_absolute}/sudo.sh"
            else
              touch "${_gen_env_dir_generated_absolute}.sh"
            fi
            ;;
        esac
      done
  done

}

env_vars() {
  ENV_TOP="$(pwd -P)"
  PATH="${ENV_TOP}/bin:${PATH}"

  HOSTNAME="${HOSTNAME=$(hostname)}"
  ID_LIKE="$(! test -f /etc/os-release || grep "^ID_LIKE=" /etc/os-release \
      || grep "^ID=" /etc/os-release | cut -d= -f2 | tr ' ' '_')"
  MACOS="$(if test "$(uname -s)" = "Darwin"; then echo true; else echo false; fi)"
  SUDO="$(if test -x /usr/bin/sudo; then echo /usr/bin/sudo; else echo ""; fi)"
  UNAME="$(uname -s)"
  VGA="$([ "${GITHUB_RUN_ID-}" ] || if $MACOS; then echo 1; else lspci 2>/dev/null | awk '/VGA/ { print 1 }'; fi)"

  _ENV_CHANGED=false
  _ENV_FILE="${ENV_TOP}/.env.sh"
  _ENV_TMP="$(mktemp)"

  ENV_CUSTOM="${ENV_TOP}/custom"
  ENV_ETC="${ENV_TOP}/etc"
  ENV_GENERATED="${ENV_TOP}/generated"
  ENV_SUPPORTED="00-common arch Darwin debian fedora Linux rhel rhel_fedora ${HOSTNAME}"
}

env_sh_profile() {
  ! test -f "${_ENV_FILE}" || test "${ENV_FORCE}" -eq 1 || return 0
  _ENV_CHANGED=true
  cat > "${_ENV_TMP}" <<EOF
# shellcheck shell=sh

#
# System wide POSIX profile
# Generated by $0

unset ENV

if ! echo "\${PATH}" | grep -q "${ENV_TOP}/bin:"; then
  export PATH="${ENV_TOP}/bin:\${PATH}"
  : "\${HOSTNAME=\$(hostname)}"; export HOSTNAME

$(for var in ENV_CUSTOM ENV_ETC ENV_GENERATED ENV_SUPPORTED ENV_TOP \
  ID_LIKE MACOS SUDO UNAME VGA; do
  echo "  export ${var}=\"$(eval echo "\$${var}")\""
done)
fi
EOF
}

env_sh_rc() {
  $_ENV_CHANGED || return 0

  cat >> "${_ENV_TMP}" <<EOF

#
# RC for interactive shells has been sourced already
: "\${ENV_SOURCED=0}"

if { [ "\${PS1-}" ] || echo "\$-" | grep -q i; } && test "\${ENV_SOURCED}" -eq 0; then \
  ENV_SOURCED=1
  unalias cp egrep fgrep grep l l. la ll lld ls mv rm xzegrep xzfgrep xzgrep zegrep zfgrep zgrep 2>/dev/null
fi

export ENV="${_ENV_FILE}"
EOF
}

main() {
  env_vars
  env_dirs

  env_sh_profile
  env_sh_rc
  
  mv "${_ENV_TMP}" "${_ENV_FILE}"
  envsync
}

main "$@"
