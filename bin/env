#!/bin/sh

#
# Generates .env.sh

set -eu

cd "$(dirname "$0")/.."

#
# Force creation of .env.sh
: "${ENV_FORCE=0}"


env_vars() {
  ENV_TOP="$(pwd -P)"
  PATH="${ENV_TOP}/bin:${PATH}"

  HOSTNAME="${HOSTNAME=$(hostname)}"
  ID_LIKE="$(! test -f /etc/os-release || grep "^ID_LIKE=" /etc/os-release \
      || grep "^ID=" /etc/os-release | cut -d= -f2 | tr ' ' '_')"
  MACOS="$(if test "$(uname -s)" = "Darwin"; then echo true; else echo false; fi)"
  SUDO="$(if test -x /usr/bin/sudo; then echo /usr/bin/sudo; else echo ""; fi)"
  UNAME="$(uname -s)"
  VGA="$([ ! "${GITHUB_RUN_ID-}" ] || { if $MACOS; then echo 1; else lspci 2>/dev/null | awk '/VGA/ { print 1 }'; fi; })"

  _ENV_CHANGED=false
  _ENV_FILE="${ENV_TOP}/.env.sh"
  _ENV_TMP="$(mktemp)"

  ENV_CUSTOM="${ENV_TOP}/custom"
  ENV_ETC="${ENV_TOP}/etc"
  ENV_GENERATED="${ENV_TOP}/generated"
  ENV_SUPPORTED="00-common arch Darwin debian fedora Linux rhel rhel_fedora ${HOSTNAME}"
}

gen_profile() {
  ! test -f "${_ENV_FILE}" || test "${ENV_FORCE}" -eq 1 || return 0
  _ENV_CHANGED=true
  cat >"${_ENV_TMP}" <<EOF
# shellcheck shell=sh

#
# System wide POSIX profile
# Generated by $0

if ! echo "\${PATH}" | grep -q "${ENV_TOP}/bin:"; then
  PATH="${ENV_TOP}/bin:\${PATH}"

$(for var in ENV_CUSTOM ENV_ETC ENV_GENERATED ENV_SUPPORTED ENV_TOP \
  HOSTNAME ID_LIKE MACOS SUDO UNAME VGA; do
  echo "  export ${var}=\"$(eval echo "\$${var}")\""
done)
fi
EOF
}


main() {
  env_vars
  gen_profile
  mv "${_ENV_TMP}" "${_ENV_FILE}"
  envsync
}

main "$@"
