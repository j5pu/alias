#!/usr/bin/env bash
#bashsupport disable=BP2001
#
# GitHub Credentials

# https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps
# https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow
# https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
# https://git-scm.com/docs/git-credential
# https://git-scm.com/docs/git-credential#IOFMT  # Input/Output Format
# https://git-scm.com/docs/gitcredentials
# https://git-scm.com/docs/git-credential-store
# git config --global credential.helper rc
# printf "%s\n" protocol=https host=mygithost username=bob password=s3cre7 | git credential-store store
# printf "%s\n" protocol=https host=mygithost username=bob password=s3cre7 | git credential-store get
# printf "%s\n" protocol=https host=mygithost username=bob | git credential fill
# printf "%s\n" protocol=https host=mygithost username=bob password=s3cre7 | git credential-store erase
# printf "%s\n" protocol=https host=mygithost username=bob | git credential fill

# To get the default (checks keychain, or store): printf "%s\n" host=github.com protocol=https | git credential fill
# Since I have it on keychain internet password then works.. this would never be used on macOS..
# how does it know the default user?
# IF I enter: printf "%s\n" host=github.com protocol=https username=foo | git credential fill
# then it will ask for it if it can not find it

set -eu

[ ! "${TRACE-}" ] || set -x
TOKEN_FILE="/tmp/${0##*/}.app_access_token"

exec 19>/Users/j5pu/rc/.log
export BASH_XTRACEFD=19
set -x
trap _trap EXIT

# 1 for GitHub App, 0 for OAuth App
#
APP=0

IGET="curl"
RC_DOTFILES_GIT_CREDENTIALS="${HOME}/.git-credentials"
# GitHub App; https://docs.github.com/en/developers/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps
# (expire in 8 hours, should use refresh token)
# https://docs.github.com/en/developers/apps/building-github-apps/refreshing-user-to-server-access-tokens
RC_GIT_CREDENTIALS_APP_CLIENT_ID="Iv1.7bafcceb3f25cce5"
# OAuth app: https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps
#
RC_GIT_CREDENTIALS_OAUTH_CLIENT_ID="02691583098d424c22e0"

if [ $APP -eq 1 ]; then
  CLIENT_ID="${RC_GIT_CREDENTIALS_APP_CLIENT_ID}"
  SCOPE=""
  TOKEN_FILENAME="app"
else
  CLIENT_ID="${RC_GIT_CREDENTIALS_OAUTH_CLIENT_ID}"
  SCOPE="$(cat <<EOF
admin:gpg_key
admin:org
admin:org_hook
admin:public_key
admin:repo_hook
delete:packages
delete_repo
gist
notifications
public_repo
read:discussion
read:gpg_key
read:org
read:packages
read:project
read:public_key
read:repo_hook
read:user
repo
repo:invite
repo:status
repo_deployment
security_events
user
user:email
user:follow
workflow
write:discussion
write:gpg_key
write:org
write:packages
write:public_key
write:repo_hook
EOF
)" # Needed only for OAuth
  TOKEN_FILENAME="oauth"
fi
TOKEN_FILE="/tmp/${0##*/}.${TOKEN_FILENAME}.token"

export CURLOPT_COOKIEJAR="${HOME}/.cache/cookies/github.txt"; touchd "${CURLOPT_COOKIEJAR}"
URL_API="https://api.github.com"
URL_CODE="https://github.com/login/device/code"
URL_POLL="https://github.com/login/oauth/access_token"
URL_REVIEW_AUTHORIZATION="https://github.com/settings/connections/applications"

: "${IGET?}"
: "${RC_DOTFILES_GIT_CREDENTIALS?}"
: "${RC_GIT_CREDENTIALS_APP_CLIENT_ID?}"

#######################################
# description
# Globals:
#   MSG_BROWSER
#   msg_browser
# Arguments:
#   1
#######################################
_browser() {
  if cmd open; then
    case "$1" in
      device_code|review_authorization) MSG_BROWSER="Opening browser!" ;;
      open)
        open "$2" &
        wait
        ;;
    esac
  else
    case "$1" in
      device_code|review_authorization) MSG_BROWSER="Open your browser and go to" ;;
    esac
  fi
}

#######################################
# description
# Globals:
#   arg
#   data
#   key
#   odd
# Arguments:
#  None
#######################################
_curl_encoding() {
  if [ "${1-}" ]; then
    data="$*"
    set --
    odd=true
    for arg in ${data}; do
      shift
      if $odd; then
        key="${arg}"
        odd=false
      else
        set -- --data-urlencode "${key}=${arg}" "$@"
      fi
    done
  fi
  echo "$@"
}

#######################################
# description
# Globals:
#   COOKIES
#   CURLOPT_COOKIEJAR
#   URL
#   response
# Arguments:
#  None
# Returns:
#   1 ...
#######################################
_curl() {
  [ ! "${1-}" ] || set -- -d "$(json "$@")"
  ! echo "${URL}" | grep -q "//github.com" || set -- -b "${CURLOPT_COOKIEJAR}" "$@"
  [ ! "${TRACE-}" ] || set -- "$@" -v
  [ ! "${HEADER-}" ] || set -- "$@" -H "${HEADER}"
  set -- curl -L --no-progress-meter "$@" -H "Accept: application/json" -H "Content-Type: application/json" "${URL}"
  QUERY="$*"
  RESPONSE="$("$@")"
  if [ "${RESPONSE-}" ]; then
    json="$(json "${RESPONSE}")" || _die "Fail to parse response to json: ${RESPONSE}"
    eval "${json}"
  else
    _die "Empty response: $*"
  fi
}

#######################################
# description
# Arguments:
#  None
#######################################
_die() {
  >&2 Error "${0##*/}: ${*}"
  exit "${ERROR:-1}"
}

#######################################
# description
# Arguments:
#  None
#######################################
_finish() {
  [ ! "${FINISH_TEST-}" ] || access_token="$(cat "${TOKEN_FILE}")"

  HEADER="Authorization: Bearer ${access_token}"
  URL="${URL_API}/"
  : get_permanent_token and secrets
  : set_env_var_tokens_gh_and_github
  : store and update gitconfig with: credential.helper rc
}

#######################################
# description
# Globals:
#   CLIENT_ID
#   IGET
#   URL
#   URL_POLL
#   access_token
#   authorization_pending
#   device_code
#   error
#   error_description
#   expires_in
#   response
#   scope
#   timeout
#   timeout_polls
#   token_type
# Arguments:
#  None
#######################################
_poll() {
  URL="${URL_POLL}"
  while true; do
    access_token=""; error=""; error_description=""; error_uri=""; scope=""; token_type=""
    interval="$((interval + 1))"
    "_${IGET}" client_id "${CLIENT_ID}" device_code "${device_code}" \
      grant_type urn:ietf:params:oauth:grant-type:device_code
    if [ "${error}" = "authorization_pending" ] && [ "${expires_in}" -gt 0 ]; then
      sleep "${interval}"
      expires_in="$((expires_in - interval))"
      >&2 echo "Waiting for authorization... code expires in: $(magenta "${expires_in}") seconds"
    elif [ "${error}" = "authorization_pending" ]; then
      _die "Timeout: authentication not complete!"
    elif [ "${error-}" ]; then
      _die "${error}: ${error_description} [${error_uri}]"
    elif [ "${access_token-}" ]; then
      >&2 echo "Authenticated with ${token_type} token: $(blue "${access_token}"), and scopes: $(blue "$(echo )${scope}")"
      _browser review_authorization
      echo
      echo "${MSG_BROWSER}: "${URL_REVIEW_AUTHORIZATION}/${CLIENT_ID}"), you can review application authorizations"
      _browser open "${URL_REVIEW_AUTHORIZATION}/${CLIENT_ID}"
      [ "${FINISH_TEST-}" ] || echo "${access_token}" > "${TOKEN_FILE}"
      break
    fi
  done
}

#######################################
# description
# Globals:
#   rc
# Arguments:
#   0
#######################################
_trap() {
  ERROR=$?
  [ "${FINISH_TEST-}" ] || rm -f "${TOKEN_FILE}"
  case $ERROR in
    0) rm -f "/tmp/${0##*/}.interval" ;;
    1) : ;;
    *) [ ! "${QUERY-}" ] || _die "${QUERY}";;
  esac
  exit $ERROR
}

#######################################
# description
# Arguments:
#  None
#######################################
erase() { echo "$@" | git credential-store erase; }

#######################################
# description
# Globals:
#   CLIENT_ID
#   IGET
#   URL
#   URL_CODE
#   access_token
#   device_code
#   expires_in
#   interval
#   msg_browser
#   msg_code
#   response
#   user_code
#   verification_uri
# Arguments:
#   0
#######################################
fetch() {
  device_code=""; user_code=""; verification_uri=""; expires_in=""; interval=""

  [ ! "${FINISH_TEST-}" ] || ! test -f "${TOKEN_FILE}" || test -s "${TOKEN_FILE}" || _finish

  URL="${URL_CODE}"
  if [ $APP -eq 1 ]; then
    "_${IGET}" client_id "${CLIENT_ID}"
  else
    "_${IGET}" client_id "${CLIENT_ID}" scope "$(echo "${SCOPE}" | tr '\n' ',' | sed 's/,$//')"
  fi

  if [ "${user_code-}" ]; then
    _browser device_code

    msg_code="Copy this code and"
    if cmd pbcopy; then
      echo "${user_code}" | pbcopy; sleep 1
      msg_code="Code copied to clipboard!"
    elif cmd xclip; then
      echo "${user_code}" | xclip -selection clipboard
      msg_code="Code copied to clipboard!"
    fi

    echo "${msg_code} paste it when prompted: $(green "${user_code}")"
    echo "${MSG_BROWSER}: $(blue "${verification_uri}")"
    _browser open "${verification_uri}"

    _poll
  elif [ "${error-}" ]; then
      _die "${error}: ${error_description} [${error_uri}]"
  else
    _die "No user code: ${user_code}"
  fi
  _finish
}

#######################################
# description
# Arguments:
#  None
#######################################
get() { echo "$@" | git credential-store get; }

#######################################
# check if credentials are needed
# Arguments:
#  user   default: repo owner-> $SUDO_USER -> $USER
#######################################
has() {
  args="$*"
  for arg in ${args}; do
    case "${arg}" in
      username=*) username="${arg#*=}" ;;
    esac
  done
  if [ ! "${1-}" ]; then
    url="$(git config remote.origin.url 2>/dev/null || true)"
    if [ "${url-}" ]; then
      dirname="$(basename "${url%/*}")"
      username="${dirname##*:}"
      username="${username##*:}"
      echo "${username}"
    fi
  fi
  username="${1:-${username:-${SUDO_USER:-${USER}}}}"
expect <<EOF
log_user 0
spawn git credential fill
send "host=github.com\r"
send "protocol=https\r"
send "username=${username}\r"
send \x04
expect -timeout 30 -re "Password for" { exit 10 }
EOF
}

#######################################
# Show help and exit
#######################################
help() {
  >&2 cat <<EOF
usage: ${0##*/} [erase|fetch|get|store]

git credential helper

Commands:
   -h, --help   display this help and exit.
  erase         store the credential, if applicable to the helper
  fetch         session to get a GitHub token
  get           return a matching credential, if any exists
  store         remove a matching credential, if any, from the helper’s storage
EOF
}

#######################################
# description
# Arguments:
#  None
#######################################
store() { echo "$@" | git credential-store get; }

#######################################
# description
# Globals:
#   arg
#   function
# Arguments:
#  None
#######################################
main() {
  for arg; do
    case "$arg" in
      -h|--help|help) : ;;
      erase|fetch|get|has|store) function="${arg}"; shift ;;
    esac
  done
  # TODO: if no command and get no da credential then fetch (afecta el que este el instead of
  # TODO: para que me diga que si hay credentials???? si no habría que inhibirlo temporalmente
  "${function:-get}" "$@"
}

main "$@"
