#!/bin/sh

#
# GitHub Credentials

# https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow
# https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
# https://git-scm.com/docs/git-credential
# https://git-scm.com/docs/git-credential#IOFMT  # Input/Output Format
# https://git-scm.com/docs/gitcredentials
# https://git-scm.com/docs/git-credential-store
# git config --global credential.helper rc
# printf "%s\n" protocol=https host=mygithost username=bob password=s3cre7 | git credential-store store
# printf "%s\n" protocol=https host=mygithost username=bob password=s3cre7 | git credential-store get
# printf "%s\n" protocol=https host=mygithost username=bob password=s3cre7 | git credential-store erase

set -eu

trap 'rc=$?; [ $rc -ne 0 ] || rm -f "/tmp/${0##*/}.interval"; exit $rc' EXIT

IGET="curl"
RC_DOTFILES_GIT_CREDENTIALS="${HOME}/.git-credentials"
RC_GIT_CREDENTIALS_APP_CLIENT_ID="Iv1.7bafcceb3f25cce5"

CLIENT_ID="Iv1.7bafcceb3f25cce5"
COOKIES="${HOME}/.cache/cookies/github.txt"; touchd "${COOKIES}"
URL_CODE="https://github.com/login/device/code"
URL_POLL="https://github.com/login/oauth/access_token"

: "${IGET?}"
: "${RC_DOTFILES_GIT_CREDENTIALS?}"
: "${RC_GIT_CREDENTIALS_APP_CLIENT_ID?}"

_curl() {
  export CURLOPT_COOKIEJAR="${COOKIES}"
  if response="$(echo curl -b "${COOKIES}" -sL \
    -H "Accept: application/json" \
    -H "Content-Type: application/json" \
    -d "$(json "$@")" \
    "${URL}")"; then
      json "${response}"
  else
    return 1
  fi
}

_die() {
  >&2 echo "${0##*/}: ${*}"
  exit 1
}

_finish() {
  : get_permanent_token and secrets
  : set_env_var_tokens_gh_and_github
  : store
}

_poll() {
  access_token=""; error=""; error_description=""; scope=""; timeout=300; timeout_polls=5, token_type=""
  URL="${URL_POLL}"
  while true; do
    if response="$("_${IGET}" client_id "${CLIENT_ID}" device_code "${device_code}" \
      grant_type urn:ietf:params:oauth:grant-type:device_code)"; then
      if [ "${authorization_pending-}" ] && [ "${timeout}" -gt 0 ]; then
        >&2 echo "Waiting for authorization... code expires in: \x1b[33m${expires_in}\x1b[m"
        sleep "${timeout_polls}"
        timeout="$((timeout - timeout_polls))"
      elif [ "${authorization_pending-}" ]; then
        _die "Authentication not complete!"
      elif [ "${error-}" ]; then
        _die "${error_description}"
      elif [ "${access_token-}" ]; then
        >&2 echo "Authenticated with GitHub, \x1b[33m${token_type}\x1b[m with the following scopes: \x1b[33m${scope}\x1b[m"
        break
      fi
    else
      die "Failed to get auth"
    fi
  done
}

erase() { :; }

fetch() {
  device_code=""; user_code=""; verification_uri=""; expires_in=""; interval=""
  if test -f "/tmp/${0##*/}.interval"; then
    interval="$(cat "/tmp/${0##*/}.interval")"
    printf "%s" "Waiting for interval for a new access token request: \x1b[33m${interval}\x1b[m seconds"

  else
    echo "$(( interval + 1))" > "/tmp/${0##*/}.interval"
  fi

  while [ "$(( interval - 1 ))" -gt 0 ]; do
    sleep 1
    expires_in="$(( expires_in - 1))"
  done
  rm -f "/tmp/${0##*/}.interval"

  URL="${URL_CODE}"
  if response="$("_${IGET}" client_id "${CLIENT_ID}")"; then
    if [ "${device_code-}" ]; then
      if open "${verification_uri}"; then
        msg_browser="Opening browser!"
      else
        msg_browser="Open your browser and go to"
      fi
      [ -n "$SSH_CLIENT" ] && SESSION_TYPE="remote"

      if [ ! "${SSH_CLIENT-}" ] && $VGA; then
        # TODO: wrapper pbcopy con xclip
        pbcopy "${user_code}"
        msg_code="Code copied to clipboard!"
        printf "%s" "Code copied!, paste it in the browser: \x1b[33m${user_code}\x1b[m"
      else
        # TODO: ver si hago lo del SSH pbcopy.
        msg_code="Copy this code and"
      fi
      printf "%s" "${msg_code} paste it when prompted: \x1b[33m${user_code}\x1b[m"
      printf "%s" "${msg_browser}: \x1b[33m${verification_uri}\x1b[m"
      echo "Code expires in: \x1b[33m${expires_in}\x1b[m seconds"
      _poll
    else
      _die "No device code: ${device_code}"
    fi
  fi
  if [ "${access_token-}" ]; then
    echo "${access_token}"
  else
    _die "Failed to get access token: ${access_token}"
  fi
}

get() { :; }

store() { :; }

main() {
  for arg; do
    case "$arg" in
      -h|--help|help) : ;;
      erase|fetch|get|store) function="${arg}"; shift ;;
    esac
  done

  "${function:-get}" "$@"
}

main "$@"
