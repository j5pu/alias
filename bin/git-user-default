#!/bin/sh

#
#

set -eu

. "$(dirname "$0")/utils.sh"

#######################################
# checks connection
# Arguments:
#  [<user>]  remote name or url (default: $USER).
#######################################
check() {
  ! ssh -T git@github.com 2>&1 | grep -q "Hi ${1}! You've successfully authenticated" || return 0
  >&2 echo "${0##*/}: ${1}: SSH access to GitHub failed."
  exit 1
}

#######################################
# show value of url.ssh://git@github.com/.insteadOf based on connectivity check
# Arguments:
#  [<user>]  remote name or url (default: $USER).
#######################################
config() { ! check "$@" 2>&1 || echo https://github.com/; }

####################
# Show help and exit
#######################################
help() {
  >&2 cat <<EOF
usage: ${0##*/} [-h|--help|help]
   or: ${0##*/} <user>
   or: ${0##*/} config

default git user, checking: remote URL, \$RC_GITHUB_DEFAULT_USER, \$SUDO_USER or \$USER

Commands:
   -h, --help   display this help and exit.
EOF
}

#######################################
# git ssh access
# Arguments:
#  [<user>  remote name or url (default: $USER).
#######################################
main() {
  for arg; do
    case "$arg" in
      -h|--help|help) help; exit ;;
    esac
  done

  url="$(git config remote.origin.url 2>/dev/null || true)"
  if [ "${url-}" ]; then
    dirname="$(basename "${url%/*}")"
    username="${dirname##*:}"
    username="${username##*:}"
  fi
  echo "${1:-${username:-${RC_GITHUB_DEFAULT_USER:-${SUDO_USER:-${USER}}}}}"
}

main "$@"
